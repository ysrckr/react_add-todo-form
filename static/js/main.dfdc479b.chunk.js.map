{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","UserInfo","user","className","href","TodoInfo","todo","completed","title","cn","TodoList","todos","map","sort","a","b","props","getUser","userId","usersFromServer","find","App","useState","setUserId","setTitle","isUser","setIsUser","isTitle","setIsTitle","todosList","setTodosList","action","method","onSubmit","event","preventDefault","newTodo","prevTodos","type","value","onChange","target","placeholder","Number","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dfdc479b.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import type { FC } from 'react';\n\nimport type { User } from '../../types/User';\n\ntype Props = {\n  user: User;\n};\nexport const UserInfo: FC<Props> = ({ user }) => (\n  <a className=\"UserInfo\" href={`mailto:${user.email}`}>\n    {user.name}\n  </a>\n);\n","import type { FC } from 'react';\n\nimport cn from 'classnames';\n\nimport type { Todo } from '../../types/Todo';\n\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: Todo;\n};\nexport const TodoInfo: FC<Props> = ({ todo }) => {\n  const { completed, title, user } = todo;\n\n  return (\n    <article\n      className={cn('TodoInfo', { 'TodoInfo--completed': completed })}\n      data-id={todo.id}\n    >\n      <h2 className=\"TodoInfo__title\">{title}</h2>\n\n      {user && <UserInfo user={user} />}\n    </article>\n  );\n};\n","import type { FC } from 'react';\n\nimport type { Todo } from '../../types/Todo';\n\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: FC<Props> = ({ todos }) => (\n  <section className=\"TodoList\">\n    {todos.map((todo) => (\n      <TodoInfo key={todo.id} todo={todo} />\n    )).sort((a, b) => a.props.todo.id - b.props.todo.id)}\n  </section>\n);\n","import { useState } from 'react';\nimport type { ChangeEvent, FormEvent } from 'react';\n\nimport todosFromServer from './api/todos';\nimport usersFromServer from './api/users';\n\nimport type { User } from './types/User';\nimport type { Todo } from './types/Todo';\n\nimport { TodoList } from './components/TodoList/TodoList';\n\nimport './App.scss';\n\nfunction getUser(userId: number): User | null {\n  const foundUser = usersFromServer.find((user) => user.id === userId);\n\n  return foundUser || null;\n}\n\nexport const todos: Todo[] = todosFromServer.map((todo) => ({\n  ...todo,\n  user: getUser(todo.userId),\n}));\n\nexport const App = () => {\n  const [userId, setUserId] = useState(0);\n  const [title, setTitle] = useState('');\n  const [isUser, setIsUser] = useState(false);\n  const [isTitle, setIsTitle] = useState(false);\n  const [todosList, setTodosList] = useState(todos);\n\n  const clearForm = () => {\n    setTitle('');\n    setUserId(0);\n\n    setIsTitle(false);\n    setIsUser(false);\n  };\n\n  const selectUser = (event: ChangeEvent<HTMLSelectElement>) => {\n    setUserId(Number(event.target.value));\n    setIsUser(false);\n  };\n\n  const changeTitle = (event: ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.target.value);\n    setIsTitle(false);\n  };\n\n  const addTodo = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    setIsTitle(!title);\n    setIsUser(!(+userId));\n\n    if (!title || !userId) {\n      return;\n    }\n\n    const newTodo: Todo = {\n      id: todos.sort((a, b) => b.id - a.id)[0].id + 1,\n      userId,\n      title,\n      completed: false,\n      user: getUser(userId),\n    };\n\n    setTodosList((prevTodos) => (\n      [...prevTodos, newTodo]\n    ));\n\n    clearForm();\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form action=\"/api/users\" method=\"POST\" onSubmit={addTodo}>\n        <div className=\"field\">\n          <input\n            type=\"text\"\n            data-cy=\"titleInput\"\n            value={title}\n            onChange={changeTitle}\n            placeholder=\"Title\"\n          />\n          {isTitle && (\n            <span className=\"error\">Please enter a title</span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <select data-cy=\"userSelect\" value={userId} onChange={selectUser}>\n            <option value=\"0\" disabled>\n              Choose a user\n            </option>\n            {usersFromServer.map((user) => (\n              <option key={user.id} value={user.id}>\n                {user.name}\n              </option>\n            ))}\n          </select>\n\n          {isUser && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n      <TodoList todos={todosList} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}